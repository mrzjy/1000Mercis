INFO: randomForest model (preprocessed by MaxMin crossvalid based on accuracy)
Best parameters set found on development set:
{'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
accuracy scores on development set:
0.722 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.723 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.723 (+/-0.001) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.733 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
0.716 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.717 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.717 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.693 (+/-0.002) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.697 (+/-0.004) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.699 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.656 (+/-0.009) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.665 (+/-0.006) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.667 (+/-0.007) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.627 (+/-0.008) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.636 (+/-0.013) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.639 (+/-0.011) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.587 (+/-0.016) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.599 (+/-0.012) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.599 (+/-0.016) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.569 (+/-0.017) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.568 (+/-0.029) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.573 (+/-0.028) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      1.00      0.85     10908
          1       0.00      0.00      0.00      3918

avg / total       0.54      0.74      0.62     14826

()
INFO: randomForest model (preprocessed by MaxMin crossvalid based on f1_micro)
Best parameters set found on development set:
{'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
f1_micro scores on development set:
0.722 (+/-0.001) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.723 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.723 (+/-0.001) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
0.717 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.718 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.717 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.694 (+/-0.004) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.698 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.698 (+/-0.004) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.657 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.665 (+/-0.007) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.667 (+/-0.010) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.628 (+/-0.006) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.637 (+/-0.008) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.638 (+/-0.013) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.594 (+/-0.010) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.597 (+/-0.020) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.600 (+/-0.017) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.568 (+/-0.030) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.572 (+/-0.023) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.568 (+/-0.033) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      1.00      0.85     10908
          1       0.25      0.00      0.00      3918

avg / total       0.61      0.74      0.62     14826

()
INFO: randomForest model (preprocessed by MaxMin crossvalid based on recall_micro)
Best parameters set found on development set:
{'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
recall_micro scores on development set:
0.722 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.723 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.723 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.734 (+/-0.001) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.734 (+/-0.000) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
0.717 (+/-0.002) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.717 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.717 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.693 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.697 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.698 (+/-0.002) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.656 (+/-0.005) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.664 (+/-0.010) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.668 (+/-0.008) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.630 (+/-0.011) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.635 (+/-0.012) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.638 (+/-0.016) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.592 (+/-0.017) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.596 (+/-0.017) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.596 (+/-0.022) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.566 (+/-0.025) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.570 (+/-0.022) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.571 (+/-0.023) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      1.00      0.85     10908
          1       0.29      0.00      0.00      3918

avg / total       0.62      0.74      0.62     14826

()
INFO: randomForest model (preprocessed by MaxMin crossvalid based on roc_auc)
Best parameters set found on development set:
{'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
roc_auc scores on development set:
0.501 (+/-0.004) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.501 (+/-0.004) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.501 (+/-0.004) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.503 (+/-0.006) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.501 (+/-0.004) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.502 (+/-0.003) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.501 (+/-0.003) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.502 (+/-0.003) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.502 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.502 (+/-0.004) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.502 (+/-0.004) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.502 (+/-0.003) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.500 (+/-0.004) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.500 (+/-0.005) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.500 (+/-0.001) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.498 (+/-0.002) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.499 (+/-0.005) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.500 (+/-0.003) for {'randomForest__class_weight': None, 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
0.502 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 1}
0.502 (+/-0.002) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 1}
0.500 (+/-0.000) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 1}
0.501 (+/-0.006) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 2}
0.500 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 2}
0.498 (+/-0.006) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 2}
0.501 (+/-0.007) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 5}
0.500 (+/-0.004) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 5}
0.500 (+/-0.004) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 5}
0.500 (+/-0.002) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 10}
0.499 (+/-0.002) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 10}
0.498 (+/-0.002) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 10}
0.500 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 25}
0.500 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 25}
0.499 (+/-0.001) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 25}
0.498 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 100, 'randomForest__min_samples_leaf': 50}
0.498 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 300, 'randomForest__min_samples_leaf': 50}
0.499 (+/-0.003) for {'randomForest__class_weight': 'balanced', 'randomForest__n_estimators': 500, 'randomForest__min_samples_leaf': 50}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      1.00      0.85     10908
          1       0.13      0.00      0.00      3918

avg / total       0.58      0.73      0.62     14826

()
INFO: logistic model (preprocessed by MaxMin crossvalid based on accuracy)
Best parameters set found on development set:
{'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
accuracy scores on development set:
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.484 (+/-0.068) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.519 (+/-0.042) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.572 (+/-0.004) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.595 (+/-0.028) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.594 (+/-0.024) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.586 (+/-0.035) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.595 (+/-0.029) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      1.00      0.85     10908
          1       0.00      0.00      0.00      3918

avg / total       0.54      0.74      0.62     14826

()
INFO: logistic model (preprocessed by MaxMin crossvalid based on f1_micro)
Best parameters set found on development set:
{'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
f1_micro scores on development set:
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.484 (+/-0.068) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.519 (+/-0.042) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.572 (+/-0.004) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.595 (+/-0.028) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.594 (+/-0.024) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.586 (+/-0.035) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.595 (+/-0.029) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      1.00      0.85     10908
          1       0.00      0.00      0.00      3918

avg / total       0.54      0.74      0.62     14826

()
INFO: logistic model (preprocessed by MaxMin crossvalid based on recall_micro)
Best parameters set found on development set:
{'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
recall_micro scores on development set:
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.484 (+/-0.068) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.519 (+/-0.042) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.572 (+/-0.004) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.595 (+/-0.028) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.594 (+/-0.024) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.586 (+/-0.035) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.734 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.595 (+/-0.029) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      1.00      0.85     10908
          1       0.00      0.00      0.00      3918

avg / total       0.54      0.74      0.62     14826

()
INFO: logistic model (preprocessed by MaxMin crossvalid based on roc_auc)
Best parameters set found on development set:
{'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
roc_auc scores on development set:
0.500 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.499 (+/-0.006) for {'logistic__C': 1e-06, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.501 (+/-0.003) for {'logistic__C': 1e-06, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.499 (+/-0.006) for {'logistic__C': 1e-05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.501 (+/-0.003) for {'logistic__C': 1e-05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.499 (+/-0.006) for {'logistic__C': 0.0001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.501 (+/-0.003) for {'logistic__C': 0.0001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.500 (+/-0.004) for {'logistic__C': 0.005, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.501 (+/-0.003) for {'logistic__C': 0.005, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.499 (+/-0.006) for {'logistic__C': 0.001, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.501 (+/-0.003) for {'logistic__C': 0.001, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.501 (+/-0.003) for {'logistic__C': 0.05, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.500 (+/-0.004) for {'logistic__C': 0.05, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l1'}
0.500 (+/-0.003) for {'logistic__C': 0.01, 'logistic__class_weight': None, 'logistic__penalty': 'l2'}
0.500 (+/-0.000) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l1'}
0.501 (+/-0.003) for {'logistic__C': 0.01, 'logistic__class_weight': 'balanced', 'logistic__penalty': 'l2'}
Detailed classification report:
()
The model is trained on the full development set.
The scores are computed on the full evaluation set.
()
             precision    recall  f1-score   support

          0       0.74      0.48      0.58     10908
          1       0.27      0.52      0.35      3918

avg / total       0.61      0.49      0.52     14826

()
